"""empty message

Revision ID: 4e7d402581a1
Revises: e1c97df97774
Create Date: 2025-03-24 13:42:51.173844

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4e7d402581a1'
down_revision = 'e1c97df97774'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('registrations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.Column('invoice_number', sa.String(), nullable=True),
    sa.Column('invoice_paid', sa.Boolean(), nullable=False),
    sa.Column('invoice_date', sa.DateTime(), nullable=True),
    sa.Column('invoice_payment_date', sa.DateTime(), nullable=True),
    sa.Column('invoice_canceled', sa.Boolean(), nullable=False),
    sa.Column('invoice_status', sa.String(), nullable=True),
    sa.Column('refund_check_num', sa.Integer(), nullable=True),
    sa.Column('fname', sa.String(), nullable=False),
    sa.Column('lname', sa.String(), nullable=False),
    sa.Column('scaname', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state_province', sa.String(), nullable=True),
    sa.Column('zip', sa.Integer(), nullable=True),
    sa.Column('country', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('invoice_email', sa.String(), nullable=True),
    sa.Column('kingdom', sa.String(), nullable=True),
    sa.Column('event_ticket', sa.String(), nullable=True),
    sa.Column('rate_mbr', sa.String(), nullable=True),
    sa.Column('rate_age', sa.String(), nullable=True),
    sa.Column('rate_date', sa.String(), nullable=True),
    sa.Column('price_calc', sa.Integer(), nullable=True),
    sa.Column('price_paid', sa.Integer(), nullable=True),
    sa.Column('atd_paid', sa.Integer(), nullable=True),
    sa.Column('atd_pay_type', sa.String(), nullable=True),
    sa.Column('price_due', sa.Integer(), nullable=True),
    sa.Column('paypal_donation', sa.Boolean(), nullable=True),
    sa.Column('paypal_donation_amount', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('lodging', sa.String(), nullable=True),
    sa.Column('pay_type', sa.String(), nullable=True),
    sa.Column('prereg_status', sa.String(), nullable=True),
    sa.Column('early_on', sa.Boolean(), nullable=True),
    sa.Column('mbr_num_exp', sa.String(), nullable=True),
    sa.Column('mbr_num', sa.Integer(), nullable=True),
    sa.Column('onsite_contact_name', sa.String(), nullable=True),
    sa.Column('onsite_contact_sca_name', sa.String(), nullable=True),
    sa.Column('onsite_contact_kingdom', sa.String(), nullable=True),
    sa.Column('onsite_contact_group', sa.String(), nullable=True),
    sa.Column('offsite_contact_name', sa.String(), nullable=True),
    sa.Column('offsite_contact_phone', sa.String(), nullable=True),
    sa.Column('minor_waiver', sa.String(), nullable=True),
    sa.Column('requests', sa.String(), nullable=True),
    sa.Column('checkin', sa.DateTime(), nullable=True),
    sa.Column('medallion', sa.Integer(), nullable=True),
    sa.Column('signature', sa.String(), nullable=True),
    sa.Column('prereg_date_time', sa.DateTime(), nullable=True),
    sa.Column('royal_departure_date', sa.DateTime(), nullable=True),
    sa.Column('royal_title', sa.String(), nullable=True),
    sa.Column('nmr_donation', sa.Integer(), nullable=True),
    sa.Column('reg_date_time', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    with op.batch_alter_table('registrations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_registrations_reg_date_time'), ['reg_date_time'], unique=False)

    op.create_table('bows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('poundage', sa.Double(), nullable=True),
    sa.Column('bow_inspection_marshal_id', sa.Integer(), nullable=True),
    sa.Column('bow_inspection_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['bow_inspection_marshal_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('crossbows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('inchpounds', sa.Double(), nullable=True),
    sa.Column('crossbow_inspection_marshal_id', sa.Integer(), nullable=True),
    sa.Column('crossbow_inspection_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['crossbow_inspection_marshal_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('incidentreport',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('regid', sa.Integer(), nullable=True),
    sa.Column('report_date', sa.DateTime(), nullable=True),
    sa.Column('incident_date', sa.DateTime(), nullable=True),
    sa.Column('reporting_user_id', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['regid'], ['registrations.id'], ),
    sa.ForeignKeyConstraint(['reporting_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('marshal_inspection',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('regid', sa.Integer(), nullable=True),
    sa.Column('inspection_type', sa.String(), nullable=True),
    sa.Column('inspection_date', sa.DateTime(), nullable=True),
    sa.Column('inspecting_marshal_id', sa.Integer(), nullable=True),
    sa.Column('inspected', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['inspecting_marshal_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['regid'], ['registrations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reglogs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('regid', sa.Integer(), nullable=True),
    sa.Column('userid', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('action', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['regid'], ['registrations.id'], ),
    sa.ForeignKeyConstraint(['userid'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reg_bows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('regid', sa.Integer(), nullable=True),
    sa.Column('bowid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['bowid'], ['bows.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['regid'], ['registrations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reg_crossbows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('regid', sa.Integer(), nullable=True),
    sa.Column('crossbowid', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['crossbowid'], ['crossbows.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['regid'], ['registrations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reg_crossbows')
    op.drop_table('reg_bows')
    op.drop_table('reglogs')
    op.drop_table('marshal_inspection')
    op.drop_table('incidentreport')
    op.drop_table('crossbows')
    op.drop_table('bows')
    with op.batch_alter_table('registrations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_registrations_reg_date_time'))

    op.drop_table('registrations')
    # ### end Alembic commands ###
